{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Message.js","services/contacts.js","App.js","index.js"],"names":["Filter","props","onChange","handleFilter","value","filter","PersonForm","onSubmit","handleSubmit","handleChange","newName","name","newNumber","type","Persons","persons","length","map","person","key","number","onClick","deleteContact","id","toLowerCase","includes","Message","message","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setFilter","successMessage","setSuccessMessage","reload","setReload","useEffect","contacts","initialContacts","event","target","preventDefault","newPerson","found","some","window","confirm","toReplace","returnedPerson","catch","error","setTimeout","concat","console","log","updatedContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e509e77.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return <> filter show with: <input onChange={props.handleFilter} value={props.filter} /> </>\r\n}\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          name: <input onChange={props.handleChange} value={props.newName} name=\"name\" />\r\n        </div>\r\n        <div>\r\n          number:{\" \"}\r\n          <input onChange={props.handleChange} value={props.newNumber} name=\"number\" />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from \"react\";\r\n\r\nconst Persons = (props) => {\r\n  if (props.persons.length !== 0) {\r\n    return (\r\n      <>\r\n        {props.filter === \"\"\r\n          ? props.persons[0].persons.map((person, key) => (\r\n              <p key={key}>\r\n                {person.name} {person.number}{\" \"}\r\n                <button onClick={() => props.deleteContact(person.id)}>\r\n                  delete\r\n                </button>\r\n              </p>\r\n            ))\r\n          : props.persons[0].persons\r\n              .filter((person) =>\r\n                person.name.toLowerCase().includes(props.filter.toLowerCase())\r\n              )\r\n              .map((person, key) => (\r\n                <p key={key}>\r\n                  {person.name} {person.number}{\" \"}\r\n                  <button onClick={() => props.deleteContact(props.person.id)}>\r\n                    delete\r\n                  </button>\r\n                </p>\r\n              ))}\r\n      </>\r\n    );\r\n  }\r\n  return 'Loading...'\r\n};\r\n\r\nexport default Persons;\r\n","import React from 'react'\r\n\r\nconst Message = ({ message }) => {\r\n    if (message === null) {\r\n      return null;\r\n    }\r\n  \r\n    return <div className={message.includes(\"Error:\") ? \"error\" : \"add\"}>{message}</div>;\r\n  };\r\n\r\nexport default Message;","import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:3001/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  remove,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter.js\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Message from \"./components/Message\";\nimport contacts from \"./services/contacts\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [reload, setReload] = useState(false);\n\n  useEffect(() => {\n    contacts.getAll().then((initialContacts) => setPersons(initialContacts));\n  }, [reload]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n    const found = persons.some((person) => {\n      return person.name === newName;\n    });\n    if (found) {\n      const replace = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n      if (replace) {\n        const [toReplace] = persons.filter((person) => person.name === newName);\n        contacts\n          .update(toReplace.id, newPerson)\n          .then((returnedPerson) =>\n            setPersons(\n              persons.map((person) =>\n                person.id !== toReplace.id ? person : returnedPerson\n              )\n            )\n          )\n          .catch((error) => {\n            setSuccessMessage(\n              `Error: Information of ${newName} has already been removed from the server`\n            );\n            setTimeout(() => {\n              setSuccessMessage(null);\n            }, 5000);\n          });\n      } else {\n        setNewName(\"\");\n        setNewNumber(\"\");\n        return;\n      }\n    } else {\n      contacts.create(newPerson).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n      });\n      setSuccessMessage(\n        found ? `${newName} number was updated` : `Added ${newName}`\n      );\n      setTimeout(() => {\n        setSuccessMessage(null);\n      }, 5000);\n      setNewName(\"\");\n      setNewNumber(\"\");\n    }\n   \n    \n    setTimeout(() => {\n      setReload(!reload);\n      console.log(reload);\n    }, 100);\n   \n  };\n\n  const handleChange = (event) => {\n    const value = event.target.value;\n    const input = event.target.name;\n    input === \"name\" ? setNewName(value) : setNewNumber(value);\n  };\n\n  const handleFilter = (event) => {\n    const value = event.target.value;\n    setFilter(value);\n  };\n\n  const deleteContact = (id) => {\n    contacts.remove(id).then((updatedContacts) => {\n      setPersons(persons.filter((person) => person.id !== id));\n    });\n    setTimeout(() => {\n      setReload(!reload);\n      console.log(reload);\n    }, 100);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message message={successMessage} />\n      <Filter handleFilter={handleFilter} filter={filter} />\n      <h2>add a new</h2>\n      <PersonForm\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        deleteContact={deleteContact}\n        persons={persons}\n        filter={filter}\n      />\n    </div>\n  );\n};\n\nexport default App;\n\n/* const addPerson = (event) => {\n  event.preventDefault();\n  const newPerson = {\n    name: newName,\n    number: newNumber,\n  };\n\n  // Check if person is already added to the phoneboook.\n  const alreadyExists = persons.some((person) => person.name === newName);\n\n  // No name provided --> could be handled by displaying an error\n  // For now do nothing.\n  if (newName === \"\") {\n    return;\n  }\n\n  if (alreadyExists) {\n    const person = persons.find((p) => p.name === newName);\n    const changedPerson = { ...person, number: newNumber };\n    const { id } = person;\n\n    // Error handling for if the updated number is too short.\n    if (newNumber < 8) {\n      setNotificationMessage({\n        error: `${newNumber} is too short, please provide a number with at least 8 digits`,\n      });\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n      return;\n    }\n\n    const confirmUpdate = window.confirm(\n      `${newName} is already added to phonebook, replace the old number with a new one?`\n    );\n\n    if (confirmUpdate) {\n      personService\n        .update(id, changedPerson)\n        .then((returnedPerson) => {\n          // Update number in state\n          setPersons(\n            persons.map((person) =>\n              person.id !== id ? person : returnedPerson\n            )\n          );\n\n          setNotificationMessage({\n            notification: `Updated number for ${person.name}`,\n          });\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n        })\n        .catch((error) => {\n          setNotificationMessage({\n            error: `Information for ${person.name} has already been removed from server`,\n          });\n          setPersons(persons.filter((p) => p.id !== id));\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n        });\n    }\n    // clear input fields\n    setNewName(\"\");\n    setNewNumber(\"\");\n    return;\n  }\n\n  personService\n    .create(newPerson)\n    .then((returnedPerson) => {\n      setPersons(persons.concat(returnedPerson));\n\n      setNotificationMessage({\n        notification: `Added ${returnedPerson.name}`,\n      });\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n\n      // clear input fields\n      setNewName(\"\");\n      setNewNumber(\"\");\n    })\n    .catch((error) => {\n      setNotificationMessage(error.response.data);\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n    });\n}; */","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}